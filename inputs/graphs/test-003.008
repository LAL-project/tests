TYPE graphs-construction
INPUT 0
BODY
	create_graph rtree t1 6
	add_edges t1 5
		0 1
		0 5
		1 2
		1 3
		3 4
		false true
	set_root t1 0
	assert is_tree t1
	find_edge_orientation t1
	assert rtree_orientation_valid t1
	assert invalid_subtree_sizes t1
	calculate_size_subtrees t1
	assert valid_subtree_sizes t1
	
	assert num_nodes_subtree t1 0 6
	assert num_nodes_subtree t1 1 4
	assert num_nodes_subtree t1 2 1
	assert num_nodes_subtree t1 3 2
	assert num_nodes_subtree t1 4 1
	assert num_nodes_subtree t1 5 1
	
	create_graph rtree t2 4
	add_edges t2 3
		0 1
		1 2
		1 3
		false true
	set_root t2 0
	assert is_tree t2
	find_edge_orientation t2
	assert rtree_orientation_valid t2
	assert invalid_subtree_sizes t2
	calculate_size_subtrees t2
	assert valid_subtree_sizes t2
	
	assert num_nodes_subtree t2 0 4
	assert num_nodes_subtree t2 1 3
	assert num_nodes_subtree t2 2 1
	assert num_nodes_subtree t2 3 1

	create_graph rtree T 0
	/* true or false, when |V(T)|=0 it does not matter */
	disjoint_union T T t2 false
	assert has_root T
	assert valid_subtree_sizes T
	assert rtree_orientation_valid T
	
	assert num_nodes_subtree t2 0 4
	assert num_nodes_subtree t2 1 3
	assert num_nodes_subtree t2 2 1
	assert num_nodes_subtree t2 3 1
	
	disjoint_union T T t1 true
	assert has_root T
	assert has_root T
	assert valid_subtree_sizes T
	assert rtree_orientation_valid T
	
	assert num_nodes_subtree T 0 10
	assert num_nodes_subtree T 1 3
	assert num_nodes_subtree T 2 1
	assert num_nodes_subtree T 3 1
	assert num_nodes_subtree T 4 6
	assert num_nodes_subtree T 5 4
	assert num_nodes_subtree T 6 1
	assert num_nodes_subtree T 7 2
	assert num_nodes_subtree T 8 1
	assert num_nodes_subtree T 9 1
