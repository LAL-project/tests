TYPE graphs-construction
INPUT 0
BODY
	create_graph rtree g1 5
	add_edges g1 4
		0 1
		1 2
		2 3
		3 4
		true true
	assert num_nodes g1 5
	assert num_edges g1 4
	assert not_has_root g1
	set_root g1 0
	assert has_root g1
	assert is_tree g1
	output_graph g1
	assert subtree_sizes_not_valid g1
	
	find_edge_orientation g1
	assert rtree_orientation_valid g1
	
	retrieve_subtree s1 g1 0
	normalise s1
	output_graph s1
	assert is_tree s1
	assert has_root s1
	assert num_nodes s1 5
	assert num_edges s1 4
	assert subtree_sizes_not_valid s1
	
	retrieve_subtree s2 g1 3
	normalise s2
	output_graph s2
	assert is_tree s2
	assert has_root s2
	assert num_nodes s2 2
	assert num_edges s2 1
	assert subtree_sizes_not_valid s2




	create_graph rtree g2 5
	add_edges g2 4
		1 0
		2 1
		3 2
		4 3
		true true
	assert num_nodes g2 5
	assert num_edges g2 4
	assert not_has_root g2
	set_root g2 4
	assert has_root g2
	assert is_tree g2
	output_graph g2
	assert subtree_sizes_not_valid g2
	
	find_edge_orientation g2
	assert rtree_orientation_valid g2
	
	retrieve_subtree s4 g2 4
	normalise s4
	output_graph s4
	assert is_tree s4
	assert has_root s4
	assert num_nodes s4 5
	assert num_edges s4 4
	assert exists_edge s4 0 1
	assert not_exists_edge s4 1 0
	assert subtree_sizes_not_valid s4
	
	retrieve_subtree s3 g2 3
	normalise s3
	output_graph s3
	assert is_tree s3
	assert has_root s3
	assert num_nodes s3 4
	assert num_edges s3 3
	assert exists_edge s3 0 1
	assert not_exists_edge s3 1 0
	assert subtree_sizes_not_valid s3
