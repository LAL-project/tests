TYPE graphs-construction
INPUT 0
BODY
	create_graph rtree g1 10
	add_edges g1 9
		0 1
		0 4
		0 5
		1 2
		1 3
		5 6
		5 9
		6 7
		7 8
		true true
	assert num_nodes g1 10
	assert num_edges g1 9
	assert not_has_root g1
	set_root g1 0
	assert has_root g1
	assert is_tree g1
	output_graph g1
	
	find_edge_orientation g1
	assert rtree_orientation_valid g1
	
	calculate_size_subtrees g1
	assert valid_subtree_sizes g1
	
	assert num_nodes_subtree g1 0 10
	assert num_nodes_subtree g1 1 3
	assert num_nodes_subtree g1 2 1
	assert num_nodes_subtree g1 3 1
	assert num_nodes_subtree g1 4 1
	assert num_nodes_subtree g1 5 5
	assert num_nodes_subtree g1 6 3
	assert num_nodes_subtree g1 7 2
	assert num_nodes_subtree g1 8 1
	assert num_nodes_subtree g1 9 1
	
	retrieve_subtree s0 g1 0
	normalise s0
	output_graph s0
	assert is_tree s0
	assert has_root s0
	assert num_nodes s0 10
	assert num_edges s0 9
	assert valid_subtree_sizes s0
	
	output_size_subtrees s0
	
	retrieve_subtree s1 g1 1
	normalise s1
	output_graph s1
	assert is_tree s1
	assert has_root s1
	assert num_nodes s1 3
	assert num_edges s1 2
	assert valid_subtree_sizes s1
	
	output_size_subtrees s1
	
	retrieve_subtree s4 g1 4
	normalise s4
	output_graph s4
	assert is_tree s4
	assert has_root s4
	assert num_nodes s4 1
	assert num_edges s4 0
	assert valid_subtree_sizes s4
	
	output_size_subtrees s4

	retrieve_subtree s5 g1 5
	normalise s5
	output_graph s5
	assert is_tree s5
	assert has_root s5
	assert num_nodes s5 5
	assert num_edges s5 4
	assert valid_subtree_sizes s5
	
	output_size_subtrees s5

	retrieve_subtree s9 g1 9
	normalise s9
	output_graph s9
	assert is_tree s9
	assert has_root s9
	assert num_nodes s9 1
	assert num_edges s9 0
	assert valid_subtree_sizes s9
	
	output_size_subtrees s9
	
	retrieve_subtree s6 g1 6
	normalise s6
	output_graph s6
	assert is_tree s6
	assert has_root s6
	assert num_nodes s6 3
	assert num_edges s6 2
	assert valid_subtree_sizes s6
	
	output_size_subtrees s6
