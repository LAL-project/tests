TYPE graphs-construction

	create_graph rtree g 5
	assert num_nodes g 5
	assert num_edges g 0
	assert is_not_tree g
	assert is_rooted g
	assert not_has_root g
	
	assert can_add_edge g 0 1
	assert can_add_edge g 0 2
	assert can_add_edge g 0 3
	assert can_add_edge g 0 4
	assert can_add_edge g 1 2
	assert can_add_edge g 1 3
	assert can_add_edge g 1 4
	assert can_add_edge g 2 3
	assert can_add_edge g 2 4
	assert can_add_edge g 3 4
	
	assert num_nodes_component g 0 1
	assert num_nodes_component g 1 1
	assert num_nodes_component g 2 1
	assert num_nodes_component g 3 1
	assert num_nodes_component g 4 1
	
	add_edge g 0 1 false true
	
	assert num_nodes_component g 0 2
	assert num_nodes_component g 1 2
	assert num_nodes_component g 2 1
	assert num_nodes_component g 3 1
	assert num_nodes_component g 4 1
	
	assert num_edges g 1
	assert is_not_tree g
	output_graph g
	
	assert cant_add_edge g 0 1
	assert can_add_edge g 0 2
	assert can_add_edge g 0 3
	assert can_add_edge g 0 4
	assert can_add_edge g 1 2
	assert can_add_edge g 1 3
	assert can_add_edge g 1 4
	assert can_add_edge g 2 3
	assert can_add_edge g 2 4
	assert can_add_edge g 3 4
	
	add_edge g 0 2 false true
	
	assert num_nodes_component g 0 3
	assert num_nodes_component g 1 3
	assert num_nodes_component g 2 3
	assert num_nodes_component g 3 1
	assert num_nodes_component g 4 1
	
	assert num_edges g 2
	assert is_not_tree g
	output_graph g
	
	assert cant_add_edge g 0 1
	assert cant_add_edge g 0 2
	assert can_add_edge g 0 3
	assert can_add_edge g 0 4
	assert cant_add_edge g 1 2
	assert can_add_edge g 1 3
	assert can_add_edge g 1 4
	assert can_add_edge g 2 3
	assert can_add_edge g 2 4
	assert can_add_edge g 3 4
	
	add_edge g 0 3 false true
	
	assert num_nodes_component g 0 4
	assert num_nodes_component g 1 4
	assert num_nodes_component g 2 4
	assert num_nodes_component g 3 4
	assert num_nodes_component g 4 1
	
	assert num_edges g 3
	assert is_not_tree g
	output_graph g
	
	assert cant_add_edge g 0 1
	assert cant_add_edge g 0 2
	assert cant_add_edge g 0 3
	assert can_add_edge g 0 4
	assert cant_add_edge g 1 2
	assert cant_add_edge g 1 3
	assert can_add_edge g 1 4
	assert cant_add_edge g 2 3
	assert can_add_edge g 2 4
	assert can_add_edge g 3 4
	
	add_edge g 0 4 false true
	
	assert num_nodes_component g 0 5
	assert num_nodes_component g 1 5
	assert num_nodes_component g 2 5
	assert num_nodes_component g 3 5
	assert num_nodes_component g 4 5
	
	assert num_edges g 4
	assert is_tree g
	output_graph g
	
	assert cant_add_edge g 0 1
	assert cant_add_edge g 0 2
	assert cant_add_edge g 0 3
	assert cant_add_edge g 0 4
	assert cant_add_edge g 1 2
	assert cant_add_edge g 1 3
	assert cant_add_edge g 1 4
	assert cant_add_edge g 2 3
	assert cant_add_edge g 2 4
	assert cant_add_edge g 3 4

	assert not_has_root g
	assert subtree_sizes_not_valid g
	assert root_is_valid g 0
	set_root g 0
	assert subtree_sizes_not_valid g
	
	calculate_size_subtrees g
	calculate_size_subtrees g
	
	assert subtree_sizes_valid g
	set_root g 0
	assert subtree_sizes_not_valid g
	
	calculate_size_subtrees g
	calculate_size_subtrees g
	
	assert root_is_not_valid g 1
	set_root g 0
	assert subtree_sizes_not_valid g
