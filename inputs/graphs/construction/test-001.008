TYPE graphs-construction
INPUT 0
BODY
	create_graph dgraph g 10
	
	/* graph is normalised -- still normalise it */
	add_edge g 0 5 true true
	assert normalised g
	
	/* graph is normalised -- still, do not normalise it */
	add_edge g 0 6 false true
	assert normalised g
	
	/* graph is not normalised -- do not normalise */
	add_edge g 0 1 false true
	assert not_normalised g
	
	/* graph is not normalised -- normalise it */
	add_edge g 3 4 true true
	assert normalised g
	
	output_graph g
	
	/* ----------------------- */
	/* ----------------------- */
	/* -- BRANCHING POINT 1 -- */
	
	/*
	Make two copies of g and insert the same edge to each
	copy with check and without check. The resulting graphs
	should be normalised.
	*/
	
	/* graph is normalised -- but do not check */
	create_graph dgraph g1 10
	assign g1 g
	add_edge g1 7 8 false false
	/* by definition, the result can't be normalised */
	assert not_normalised g1
	output_graph g1
	
	/* graph is normalised -- and check */
	create_graph dgraph g2 10
	assign g2 g
	add_edge g2 7 8 false true
	assert normalised g2
	output_graph g2

	/* ----------------------- */
	/* ----------------------- */
	
	add_edge g 6 9 true true
	output_graph g
	
	/* ----------------------- */
	/* ----------------------- */
	/* -- BRANCHING POINT 2 -- */
	
	/*
	Make two copies of g and insert the same edge to each
	copy with check and without check. The resulting graphs
	should not be normalised.
	*/
	
	/* graph is not normalised -- but do not check */
	create_graph dgraph g3 10
	assign g3 g
	add_edge g3 6 7 false false
	/* by definition, the result can't be normalised */
	assert not_normalised g3
	output_graph g3
	
	/* graph is not normalised -- and check */
	create_graph dgraph g4 10
	assign g4 g
	add_edge g4 6 7 false true
	assert not_normalised g4
	output_graph g4

	
