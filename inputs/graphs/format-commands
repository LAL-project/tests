
COMMANDS AVAILABLE
==================

** /* COMMENTS */
	Comments are delimited by an opening '/*' and a closing '*/'.

** output STRING
	Outputs to standard output string STRING. A valid string is one that is enclosed with ".

** create_graph TYPE GRAPH N
	Creates a graph of a certain TYPE and a given number of vertices N
	Types supported:
		- ugraph
		- dgraph
		- ftree
		- rtree

** read_graph GRAPH_TYPE GRAPH FILE FILE_TYPE true/false
	Reads a directed/undirected (type) graph from file FILE into variable GRAPH.
	The type file is a string for the format of the graph stored in the file.
	Allowed strings:
		- edge_list

** output_graph GRAPH
	Outputs a graph to standard output

** add_edge GRAPH VERTEX1 VERTEX2 true/false true/false
	Adds an edge to a graph. Normalises (or not) the graph. After the addition,
	check if the result is normalised or not.
	
** add_edges GRAPH N VERTEX1 VERTEX2 ... VERTEX_{2n-1} VERTEX_{2n} true/false true/false
	Adds N edges to a graph. Normalises (or not) the graph. After the addition,
	check if the result is normalised or not.

** remove_edge GRAPH VERTEX1 VERTEX2 true/false true/false
	Removes an edge from a graph. Normalises (or not) the graph. After the removal,
	check if the result is normalised or not.
	
** remove_edges GRAPH N VERTEX1 VERTEX2 ... VERTEX_{2n-1} VERTEX_{2n} true/false true/false
	Removes N edges from a graph. Normalises (or not) the graph. After the removal,
	check if the result is normalised or not.

** check_edge_iterator GRAPH
	Builds the list of edges for a graph and asserts that is the same
	as that returned by a brute force method.

** output_edges GRAPH
	Outputs the list of edges of the graph.

** check_Q_iterator GRAPH
	Builds the list of pairs of independent edges for a graph and asserts
	that is the same as that returned by a brute force method method.

** output_Q GRAPH
	Outputs the list of pairs of independent edges of the graph.

** normalise GRAPH
	Normalise a graph
	
** assign GRAPH1 GRAPH2
	Assign graph 2 to graph 1
	
** disjoint_union GRAPH_RESULT GRAPH1 GRAPH2 (true/false)
	Make the disjoint union of GRAPH1 and GRAPH2 and store the result
	in GRAPH_RESULT. For undirected/directed graphs, and for free trees,
	the Boolean parameter should not be given.
	
	If the graphs are rooted trees, then the command requires an extra
	Boolean parameter true/false.

+++++++++++++++++++++++++++++++++++++++++

** assert
	Makes sure that something is true
	
	-- equal_graphs GRAPH1 GRAPH2
		asserts that two graphs are equal (here "equal" is not the
		same as "isomorphic"!)
	
	-- not_equal_graphs GRAPH1 GRAPH2
		asserts that two graphs are equal (here "equal" is not the
		same as "isomorphic"!)
	
	-- neighbours_are GRAPH VERTEX0 N VERTEX1 ... VERTEXN
		asserts that the neighbours of VERTEX0 in graph GRAPH are VERTEX1 ... VERTEXN
	
	-- normalised GRAPH
		asserts that a graph IS normalised
	
	-- not_normalised GRAPH
		asserts that a graph IS NOT normalised
	
	-- exists_edge GRAPH VERTEX1 VERTEX2
		asserts that a given edge exists
	
	-- not_exists_edge GRAPH VERTEX1 VERTEX2
		asserts that a given edge does NOT exist
	
	-- num_nodes GRAPH N
		asserts that the number of nodes is N
	
	-- num_edges GRAPH N
		asserts that the number of edges is N
	
	-- edges_are GRAPH N VERTEX1 VERTEX2 ... VERTEX_{2n-1} VERTEX_{2n}
		asserts that the edges in the graph are those specified in the list.
		In case of undirected graphs, the edges must be given in lexicographic
		order, i.e., the edges (s,t) given must be such that s<t.
	
	-- elements_Q_are GRAPH N VERTEX1 VERTEX2 ... VERTEX_{4n-1} VERTEX_{4n}
		asserts that the pairs of independent edges in the graph are
		those specified in the list.
		In case of undirected graphs, the edges must be given in lexicographic
		order, i.e., the edges (s,t) given must be such that s < t.
		For both directed and undirected graphs, the pairs ((s,t),(u,v))
		must be given also in lexicographic order, i.e., s<u.
	
	-- is_undirected GRAPH
		asserts that the graph is undirected
	
	-- not_undirected GRAPH
		asserts that the graph is undirected
	
	-- is_directed GRAPH
		asserts that the graph is directed
	
	-- not_directed GRAPH
		asserts that the graph is directed
	
	-- degree GRAPH NODE d
		asserts that the degree (out-degree + in-degree for directed
		graphs) equals d
	
	DIRECTED GRAPHS (including rooted trees)
	===============
	
	-- in_neighbours_are GRAPH VERTEX0 N VERTEX1 ... VERTEXN
		asserts that the in-neighbours of VERTEX0 in graph GRAPH are VERTEX1 ... VERTEXN
	
	-- full_degree GRAPH NODE d
		asserts that the in-degree plus out-degree equals d.
	
	-- in_degree GRAPH NODE d
		asserts that the in-degree equals d.
	
	-- out_degree GRAPH NODE d
		asserts that the out-degree equals d.
	
	TREES
	=====
	
	-- is_tree TREE
		Asserts that tree TREE has one edge less than the number of vertices.
		Under a constrained addition of edges, this assertion not failing ensures
		that TREE is an actual tree.
		
	-- is_not_tree TREE
		Asserts that tree TREE has one edge less than the number of vertices.
		Under a constrained addition of edges, this assertion failing ensures
		that TREE is not an actual tree.
	
	-- can_add_edge TREE VERTEX_1 VERTEX_2
		asserts that an edge can be added to the graph
		
	-- cant_add_edge TREE VERTEX_1 VERTEX_2
		asserts that an edge can NOT be added to the graph
	
	-- can_add_edges TREE N VERTEX_1 VERTEX_2 .. VERTEX_{2N-1} VERTEX_{2N}
		asserts that the edges in the list can be added to the graph
		
	-- cant_add_edges TREE N VERTEX_1 VERTEX_2 .. VERTEX_{2N-1} VERTEX_{2N}
		asserts that the edges in the list cant be added to the graph
	
	-- num_nodes_component TREE u N
		asserts that the size of the connected component to which vertex
		u belongs to is equal to N (with the special consideration for
		directed trees).
	
	-- is_rooted TREE
		asserts that the tree is rooted
	
	-- is_not_rooted TREE
		asserts that the tree is NOT rooted
	
	ROOTED TREES
	============
	
	-- valid_subtree_sizes TREE
		asserts that the number of subtrees calculated is valid.
	
	-- invalid_subtree_sizes TREE
		asserts that the number of subtrees calculated is not valid.
	
	-- has_root TREE
		asserts that the rooted tree has a root.
	
	-- not_has_root TREE
		asserts that the rooted tree does not have a root.
		
	-- num_nodes_subtree TREE NODE SIZE
		asserts that the subtree of GRAPH rooted at node NODE has size SIZE
	
	-- rtree_orientation_valid TREE
		asserts that the orientation of the tree's edges is valid.
	
	-- rtree_orientation_not_valid TREE
		asserts that the orientation of the tree's edges is not valid.

+++++++++++++++++++++++++++++++++++++++++

DIRECTED GRAPHS (excluding trees)
===============

** dgraph_to_ugraph UG DG
	Converts the directed graph DG into an undirected graph UG

TREES
=====

** fftree_to_rtree TREE_RESULT TREE ROOT_NODE
	Converts the tree TREE into a rooted tree TREE_RESULT taking
	node ROOT_NODE as its root.

ROOTED TREES
============

** set_root TREE NODE
	Sets the root NODE to TREE.

** retrieve_subtree TREE_RESULT TREE NODE
	Retrieves the subtree of a rooted tree TREE into tree TREE_RESULT.
	The tree must have a root.

** calculate_size_subtrees TREE
	Calculates the size of each subtree of the rooted tree.
	The tree must have a root.

** find_edge_orientation TREE
	Calculates the orientation of the rooted tree's edges.
	The tree must have a root.
