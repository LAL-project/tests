TYPE construction_graph
INPUT 0
BODY
	read_graph dgraph g2 graphs/linear-tree/002 edge_list true
	assert normalised g2
	assert num_nodes g2 2
	assert num_edges g2 1
	check_edge_iterator g2
	check_Q_iterator g2
	
	read_graph dgraph g3 graphs/linear-tree/003 edge_list true
	assert normalised g3
	assert num_nodes g3 3
	assert num_edges g3 2
	check_edge_iterator g3
	check_Q_iterator g3
	
	read_graph dgraph g4 graphs/linear-tree/004 edge_list true
	assert normalised g4
	assert num_nodes g4 4
	assert num_edges g4 3
	check_edge_iterator g4
	check_Q_iterator g4

	read_graph dgraph g5 graphs/linear-tree/005 edge_list true
	assert normalised g5
	assert num_nodes g5 5
	assert num_edges g5 4
	check_edge_iterator g5
	check_Q_iterator g5
	
	read_graph dgraph g6 graphs/linear-tree/006 edge_list true
	assert normalised g6
	assert num_nodes g6 6
	assert num_edges g6 5
	check_edge_iterator g6
	check_Q_iterator g6
	
	read_graph dgraph g7 graphs/linear-tree/007 edge_list true
	assert normalised g7
	assert num_nodes g7 7
	assert num_edges g7 6
	check_edge_iterator g7
	check_Q_iterator g7
	
	read_graph dgraph g8 graphs/linear-tree/008 edge_list true
	assert normalised g8
	assert num_nodes g8 8
	assert num_edges g8 7
	check_edge_iterator g8
	check_Q_iterator g8
	
	read_graph dgraph g9 graphs/linear-tree/009 edge_list true
	assert normalised g9
	assert num_nodes g9 9
	assert num_edges g9 8
	check_edge_iterator g9
	check_Q_iterator g9
	
	read_graph dgraph g10 graphs/linear-tree/010 edge_list true
	assert normalised g10
	assert num_nodes g10 10
	assert num_edges g10 9
	check_edge_iterator g10
	check_Q_iterator g10
