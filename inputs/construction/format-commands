** create_graph TYPE GRAPH N
	Creates a graph of a certain TYPE and a given number of vertices N
	Types supported:
		- undirected
		- directed
		- rooted_directed_tree

** read_graph GRAPH_TYPE GRAPH FILE FILE_TYPE true/false
	Reads a directed/undirected (type) graph from file FILE into variable GRAPH.
	The type file is a string for the format of the graph stored in the file.
	Allowed strings:
		- edge_list

** add_edge GRAPH VERTEX1 VERTEX2 true/false
	Adds an edge to a graph. Normalises (or not) the graph
	
** add_edges GRAPH N VERTEX1 VERTEX2 ... VERTEX_{2n-1} VERTEX_{2n} true/false
	Adds N edges to a graph. Normalises (or not) the graph
	
** assert
	Makes sure that something is true
	
	-- not_normalised GRAPH
		asserts that a graph is NOT normalised
		
	-- normalised GRAPH
		asserts that a graph IS normalised
		
	-- equal_graphs GRAPH1 GRAPH2
		asserts that two graphs are equal (here "equal" is not the
		same as "isomorphic"!)
	
	-- not_equal_graphs GRAPH1 GRAPH2
		asserts that two graphs are equal (here "equal" is not the
		same as "isomorphic"!)
	
	-- exists_edge GRAPH VERTEX1 VERTEX2
		asserts that a given edge exists
	
	-- not_exists_edge GRAPH VERTEX1 VERTEX2
		asserts that a given edge does NOT exist
	
	-- num_nodes GRAPH N
		asserts that the number of nodes is N
		
	-- num_edges GRAPH N
		asserts that the number of edges is N
	
	-- edges_are GRAPH N VERTEX1 VERTEX2 ... VERTEX_{2n-1} VERTEX_{2n}
		asserts that the edges in the graph are those specified in the list.
		In case of undirected graphs, the edges must be given in lexicographic
		order, i.e., the edges (s,t) given must be such that s<t.
	
	-- elements_Q_are GRAPH N VERTEX1 VERTEX2 ... VERTEX_{4n-1} VERTEX_{4n}
		asserts that the pairs of independent edges in the graph are
		those specified in the list.
		In case of undirected graphs, the edges must be given in lexicographic
		order, i.e., the edges (s,t) given must be such that s < t.
		For both directed and undirected graphs, the pairs ((s,t),(u,v))
		must be given also in lexicographic order, i.e., s<u.
	
	-- directed GRAPH
		asserts that the graph is directed
	
	-- not_directed GRAPH
		asserts that the graph is directed
		
	-- undirected GRAPH
		asserts that the graph is undirected
	
	-- not_undirected GRAPH
		asserts that the graph is undirected
	
	-- degree GRAPH NODE d
		asserts that the degree (out-degree for directed graphs) equals d
	
	DIRECTED GRAPHS
	-- in_degree GRAPH NODE d
		asserts that the in-degree. Only for directed graphs
	
	ROOTED DIRECTED TREES
	-- is_root GRAPH NODE
		asserts that the node NODE is the root 
	
** check_edge_iterator GRAPH
	Builds the list of edges for a graph and asserts that is the same
	as that returned by a brute force method.

** check_Q_iterator GRAPH
	Builds the list of pairs of independent edges for a graph and asserts
	that is the same as that returned by a brute force method method.

** normalise GRAPH
	Normalise a graph
	
** assign GRAPH1 GRAPH2
	Assign graph 2 to graph 1
	
** disjoint_union GRAPH_RESULT GRAPH1 GRAPH2
	Make the disjoint union of GRAPH1 and GRAPH2 and store the result
	in GRAPH_RESULT

DIRECTED GRAPHS
** to_undirected GRAPH_RESULT GRAPH
	Converts the directed graph GRAPH into an undirected graph GRAPH_RESULT

ROOTED DIRECTED TREES
** to_rooted_directed GRAPH_RESULT GRAPH ROOT_NODE
	Converts undirected graph GRAPH into a rooted directed tree GRAPH_RESULT
	taking node ROOT_NODE as its root.
