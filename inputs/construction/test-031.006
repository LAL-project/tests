TYPE construction_graph
INPUT 0
BODY
	read_graph dgraph g2 graphs/complete/02 edge_list true
	assert is_normalised g2
	assert num_nodes g2 2
	assert num_edges g2 1
	check_edge_iterator g2
	check_Q_iterator g2
	
	read_graph dgraph g3 graphs/complete/03 edge_list true
	assert is_normalised g3
	assert num_nodes g3 3
	assert num_edges g3 3
	check_edge_iterator g3
	check_Q_iterator g3
	
	read_graph dgraph g4 graphs/complete/04 edge_list true
	assert is_normalised g4
	assert num_nodes g4 4
	assert num_edges g4 6
	check_edge_iterator g4
	check_Q_iterator g4

	read_graph dgraph g5 graphs/complete/05 edge_list true
	assert is_normalised g5
	assert num_nodes g5 5
	assert num_edges g5 10
	check_edge_iterator g5
	check_Q_iterator g5
	
	read_graph dgraph g6 graphs/complete/06 edge_list true
	assert is_normalised g6
	assert num_nodes g6 6
	assert num_edges g6 15
	check_edge_iterator g6
	check_Q_iterator g6
	
	read_graph dgraph g7 graphs/complete/07 edge_list true
	assert is_normalised g7
	assert num_nodes g7 7
	assert num_edges g7 21
	check_edge_iterator g7
	check_Q_iterator g7
	
	read_graph dgraph g8 graphs/complete/08 edge_list true
	assert is_normalised g8
	assert num_nodes g8 8
	assert num_edges g8 28
	check_edge_iterator g8
	check_Q_iterator g8
	
	read_graph dgraph g9 graphs/complete/09 edge_list true
	assert is_normalised g9
	assert num_nodes g9 9
	assert num_edges g9 36
	check_edge_iterator g9
	check_Q_iterator g9
	
	read_graph dgraph g10 graphs/complete/10 edge_list true
	assert is_normalised g10
	assert num_nodes g10 10
	assert num_edges g10 45
	check_edge_iterator g10
	check_Q_iterator g10
