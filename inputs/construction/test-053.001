TYPE construction_graph
INPUT 0
BODY
	create_graph rtree g 5
	add_edge g 0 1 false
	add_edge g 0 2 false
	add_edge g 0 3 false
	add_edge g 0 4 false
	assert rtree_type_not_valid g
	
	
	
	
	set_root g 0
	assert rtree_type_not_valid g
	find_rtree_type g
	assert rtree_type_valid g
	
	assert is_rtree_type g arborescence
	assert is_not_rtree_type g anti_arborescence
	assert is_not_rtree_type g none
	
	
	
	
	set_root g 1
	assert rtree_type_not_valid g
	find_rtree_type g
	assert rtree_type_valid g
	
	assert is_not_rtree_type g arborescence
	assert is_not_rtree_type g anti_arborescence
	assert is_rtree_type g none

	set_root g 2
	assert rtree_type_not_valid g
	find_rtree_type g
	assert rtree_type_valid g
	
	assert is_not_rtree_type g arborescence
	assert is_not_rtree_type g anti_arborescence
	assert is_rtree_type g none
	
	set_root g 3
	assert rtree_type_not_valid g
	find_rtree_type g
	assert rtree_type_valid g
	
	assert is_not_rtree_type g arborescence
	assert is_not_rtree_type g anti_arborescence
	assert is_rtree_type g none
	
	set_root g 4
	assert rtree_type_not_valid g
	find_rtree_type g
	assert rtree_type_valid g
	
	assert is_not_rtree_type g arborescence
	assert is_not_rtree_type g anti_arborescence
	assert is_rtree_type g none
